# Task to Install Third Party Packages
# Here the Inputs are GitHub repo with an Application Source, any specific Node Version, and path to application directory
# Application source is cloned under /workspace/<resource-name> by default if targetPath is not specified.
# This task installs third party packages under /workspace/<resource-name>/<app_path>
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: task-install-deps
spec:
  inputs:
    resources:
    - name: git-repo
      type: git
    params:
    - name: OW_APP_NODE_VERSION
      default: "node"
      description: "Any specific Node version needed to compile/run application source on"
    - name: OW_APP_PATH
      default: ""
      description: "Relative or Absolute path to the application source"
  outputs:
    resources:
    - name: git-repo
      type: git
 steps:
  - name: install-node-packages
    image: $(inputs.params.OW_APP_NODE_VERSION)
    command:
    - bash
    args:
    - -c
    - |
      cd $(inputs.params.OW_APP_PATH)
      echo "Starting to install Node Packages under $(inputs.params.OW_APP_PATH)"
      npm install --production --loglevel=error
      if [ $? = 0 ]; then
        echo "Successfully finished installing Node Packages under $(inputs.params.OW_APP_PATH)"
      else
        echo "Failed to install Node Packages under $(inputs.params.OW_APP_PATH)"
      fi
---


# Task to build archive with an application source
# Inputs:
#   GitHub Resource: application source
#   Node: any specific Node version, e.g. "node:10.16", or "node:10.16-stretch", etc default is "node"
#     any supported Node tags are allowed from https://hub.docker.com/_/node/
#   Archive Utility: any particular archive utility, default is zip
#   Archive Name: default is action.zip
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: task-build-archive
spec:
  inputs:
    resources:
    - name: git-repo
      type: git
    params:
    - name: OW_APP_NODE_VERSION
      default: "node"
    - name: OW_APP_PATH
      default: ""
    - name: ARCHIVE_UTILITY
      default: "zip"
    - name: OW_ACTION_ARCHIVE_NAME
      default: "action.zip"
  steps:
  - name: build-action-archive
    image: $(inputs.params.OW_APP_NODE_VERSION)
    command:
    - bash
    args:
    - -c
    - |
      apt-get update && apt-get install $(inputs.params.ARCHIVE_UTILITY)
      cd $(inputs.params.OW_APP_PATH) && $(inputs.params.ARCHIVE_UTILITY) $(inputs.params.OW_ACTION_ARCHIVE_NAME) -r *
      if [ $? = 0 ]; then
        echo "Successfully built and created $(inputs.params.OW_ACTION_ARCHIVE_NAME) under $(inputs.params.OW_APP_PATH)"
      else
        echo "Failed to build and archive action source into $(inputs.params.OW_ACTION_ARCHIVE_NAME) under $(inputs.params.OW_APP_PATH)"
      fi
      #        base64 $(inputs.params.OW_ACTION_ARCHIVE_NAME) | tr -d '[:space:]'
---

# Task to pull OpenWhisk Runtime and update runtime Dockerfile with an application source
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: task-setup-dockerfile
spec:
  inputs:
    resources:
    - name: git-repo
      type: git
    - name: runtime-git-repo
      type: git
    params:
    - name: DOCKERFILE
      description: The path to the dockerfile to build from Runtime Repo
    - name: OW_RUNTIME_DEBUG
      description: flag to indicate debug mode should be on/off
      default: "false"
    - name: OW_RUNTIME_PLATFORM
      description: flag to indicate the platform, one of ["openwhisk", "knative", ... ]
      default: "knative"
    - name: OW_ACTION_NAME
      description: name of the action
      default: ""
    - name: OW_ACTION_CODE
      description: JavaScript source code to be evaluated
      default: ""
    - name: OW_ACTION_MAIN
      description: name of the function in the "__OW_ACTION_CODE" to call as the action handler
      default: "main"
    - name: OW_ACTION_BINARY
      description: flag to indicate zip function, for zip actions, "__OW_ACTION_CODE" must be base64 encoded string
      default: "false"
    - name: OW_HTTP_METHODS
      description: list of HTTP methods, any combination of [GET, POST, PUT, and DELETE], default is [POST]
      default: "[POST]"
    - name: OW_ACTION_RAW
      description: flag to indicate raw HTTP handling, interpret and process an incoming HTTP body directly
      default: "false"
  outputs:
    resources:
    - name: runtime-git-repo
      type: git
  steps:
  - name: update-dockerfile
    image: ubuntu 
    command:
    - bash
    args:
    - -c
    - |
      cd $(inputs.params.OW_APP_PATH)
      OW_ACTION_CODE=`base64 $(inputs.params.OW_ACTION_ARCHIVE_NAME) | tr -d '[:space:]'`
      OW_ACTION_RAW=true
      cd -
      fi
      cat <<EOF >> $(inputs.params.DOCKERFILE)
        ENV __OW_RUNTIME_DEBUG "$(inputs.params.OW_RUNTIME_DEBUG)"
        ENV __OW_RUNTIME_PLATFORM "$(inputs.params.OW_RUNTIME_PLATFORM)"
        ENV __OW_ACTION_NAME "$(inputs.params.OW_ACTION_NAME)"
        ENV __OW_ACTION_CODE "$(OW_ACTION_CODE)"
        ENV __OW_ACTION_MAIN "$(inputs.params.OW_ACTION_MAIN)"
        ENV __OW_ACTION_BINARY "$(inputs.params.OW_ACTION_BINARY)"
        ENV __OW_HTTP_METHODS "$(inputs.params.OW_HTTP_METHODS)"
        ENV __OW_ACTION_RAW "$(OW_ACTION_RAW)"
      EOF      
  - name: update-dockerfile-for-tekton
    image: ubuntu 
    command:
    - sed
    args:
    - -i
    - -e
    - 's/COPY ./COPY .\/runtime-git-repo/g'
    - $(inputs.params.DOCKERFILE)

---

# Task to build an image after finishing all the pre-processing including
# * Installing necessary tools
# * Installing dependecies
# * Packaging dependencies with application source
# * Decoding the complied and archived application source 
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: task-build-image
spec:
  inputs:
    resources:
    - name: runtime-git-repo
      type: git
  outputs:
    resources:
    - name: runtime-image
      type: image
  steps:
  - name: build-action-image
    image: "gcr.io/kaniko-project/executor:latest"
    command:
    - /kaniko/executor
    args:
    - --dockerfile=$(inputs.params.DOCKERFILE)
    - --destination=$(outputs.resources.runtime-image.url)
---

# Pipeline
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: build-openwhisk-app
spec:
  params:
  - name: OW_APP_PATH
    type: string
  resources:
  - name: app-git-repo
    type: git
  tasks:
  - name: install-deps
    taskRef:
      name: task-install-deps
    params:
    - name: OW_APP_PATH
      value: $(params.OW_APP_PATH)
    resources:
      inputs:
      - name: git-repo
        resource: app-git-repo
      outputs:
      - name: git-repo
        resource: app-git-repo
  - name: build-archive
    taskRef:
      name: task-build-archive
    params:
    - name: OW_APP_PATH
      value: $(params.OW_APP_PATH)
    resources:
      inputs:
      - name: git-repo
        resource: app-git-repo

---



# Git Pipeline Resource representing an application source on GitHub
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: app-git
spec:
  type: git
  params:
  - name: revision
    value: master
  - name: url
    value: https://github.com/apache/openwhisk-test.git
---



# Image Pipeline Resource for OpenWhisk NodeJS Sample Application
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: openwhisk-nodejs-helloworld-image
spec:
 type: image
 params:
 - name: url
   value: docker.io/${DOCKER_USERNAME}/openwhisk-nodejs-helloworld
---


# Pipeline Run
apiVersion: tekton.dev/v1alpha1
kind: PipelineRun
metadata:
  name: run-build-openwhisk-app
spec:
  pipelineRef:
    name: build-openwhisk-app
  params:
  - name: OW_APP_PATH
    value: "/workspace/git-repo/packages/left-pad/"
  resources:
  - name: app-git-repo
    resourceRef:
      name: app-git
    
---
